1. tbl_board 게시판 테이블
   member    회원 테이블
   
2. 스프링 시큐리티와 인증/권한 처리
	[인 메모리 인증 방식]
	<security:user-service>
    	<security:user name="hong" authorities="ROLE_USER" password="{noop}4321"/>
    	<security:user name="admin" authorities="ROLE_USER, ROLE_MANAGER, ROLE_ADMIN" password="{noop}4321"/>
    </security:user-service>
	
	=> [JDBC 연동해서 인증 방식]

3. 스프링 시큐리티의 회원 테이블
	create table users(
		username varchar2(50) not null primary key
		, password varchar2(50) not null
		, enabled char(1) default '1'
	);
	
	CREATE TABLE authorities(
		username varchar2(50) not null
		, authority varchar2() not null
		, constraint fk_?? foreign key(username) references users(username) 
	)
	
	.예)
	[user]
	hong 1234 1
	admin 1324 1
	
	[authorities]
	hong ROLE_USER
	admin ROLE_USER
	admin ROLE_ADMIN
	admin ROLE_MANAGER
	
4. security-context.xml
<security:jdbc-user-service data-source-ref="dataSource"/>

5. 기존의 테이블 member를 사용 + member_authorities 테이블 생성
	1) member
		id => username
		pwd => password
		enabled 컬럼 추가
		
	2) member 테이블의 id 컬럼 PK 로 설정
	ALTER TABLE member
	ADD CONSTRAINT pk_member_id PRIMARY KEY(id);
	
	3) authorities (권한) 테이블 생성
	CREATE TABLE member_authorities(
	   username     varchar2(50) not null      
	  , authority    varchar2(50) not null 
	  , constraint fk_member_authorities_username 
	               FOREIGN KEY(username) 
	               REFERENCES member(id)
	);
	
6. PasswordEncoder 임시 사용 X {noop}4321
	id      pwd
	admin   $2a$10$g3e6L/DbcX7vR8cf4YvR9eGLJSYi/0cWHSor0.eJ9jC3lvxoxlwu2
	1) member 테이블의 pwd 컬럼의 varchar2(50) -> varchar2(100) 변경
	2) 스프링 제공하는 passwordEncoder 빈 등록 설정.
	
	3) JoinController 수정
		ㄱ. join.jsp 확인
		
		@Autowired
		private PasswordEncoder passwordEncoder;
		
		@PostMapping("/join.htm")
		public String join(MemberVO member) throws Exception {
			String pwd = member.getPwd();
			member.setPwd(this.passwordEncoder.encode(pwd));
			
			this.memberDao.insert(member);
			return "redirect:../index.htm";
		}
		
	4) 회원가입 페이지에서 계정 추가
	   hong 계정 추가
	   admin 계정 추가
	   mun 계정 추가
	
	
	
	
	
	
	
	
	