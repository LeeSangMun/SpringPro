1. SECURITY(보안) = 인증(authentication) + 권한(인가)(Authorization)
					익명(guest) 로그인.     관리자, 일반회원
2. 인증, 권한 처리 = 쿠키, 세션 
	스프링 Interceptor vs 필터 차이점 
	
	스프링 컨테이너
	[ 스프링빈객체 ] // 필터는 컨테이너에 접근할 수 없다.
				  // 스프링 인터셉터는 빈으로 생성가능
				  
3. 체크 제약조건 확인 후 삭제

4. 글쓰기 작업 확인 ~ 

5. [스프링 시큐리티]
	1) pom.xml - Spring Web Security 의존 모듈 설정
		공식 문서에는 spring-security-web 1개 설정.
	
	  <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-web</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>

      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-config</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>

      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-core</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>

      <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-taglibs -->
      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-taglibs</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>
      
	2) 시큐리티 관련 설정 security-context.xml
		1] web.xml
		<context-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				/WEB-INF/spring/root-context.xml
				/WEB-INF/spring/security-context.xml
			</param-value>
		</context-param>
		
		2] 
		spring-security-5.0.xsd // 버그가 있다.
		spring-security-4.2.xsd
		
		3]
		<filter>
			<filter-name>springSecurityFilterChain</filter-name>
			<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		</filter>
		<filter-mapping>
			<filter-name>springSecurityFilterChain</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping> 
		
------------------------------------------------------------------------------
6. 시큐리티가 필요한 URL 설계
	ㄱ. 게시판 글쓰기 - 인증(로그인)
	ㄴ. 게시판 작성자는 인증받은 ID로 사용
	ㄷ. 게시판 수정/삭제 - 작성자 확인, 관리자(권한)만 삭제
	ㄹ. 그 외의 요청URL은 인증받지 않아도 모든 사용자가 사용 가능.
	
7. (암기) 시큐리티 내부 구조(개요)
	(1) AuthenticationManager(인증관리자)	- 가장 중요한 역할
						, 다양한 방식의 인증을 처리할 수 있도록 구조 설계됨
						(인터페이스)
	(2) ProviderManager(제공관리자)		- 인증처리를 AuthenticationProvider 객체를 이용해서 
										  처리를 위임하는 역할	(인터페이스)			
	(3) AuthenticationProvider(인증제공자)	- 실제 인증 작업을 진행(처리)하는 역할 (인터페이스)
	(4) UserDetailsService(사용자상세서비스)- 인증된 실제 사용자의 정보와 권한 정보를 처리해서 반환하는 객체 (인터페이스)
	
		
	(3) 또는 (4) 직접 구현할 경우가 있다. - 대부분 (4)을 직접 구현
		, 새로운 프로토콜이나 인증 구현 방식을 직접 구현하는 경우에는 (3) 구현.	
		
8. [6] 시큐리티가 필요한 URL 설계 => 접근 제한 설정 코딩.
	(1) 접근 제한 설정 태그 - security-context.xml  // <security:intercept-url/>
	<security:http use-expressions="true"> 
		<security:intercept-url pattern="url패턴" access="권한 체크(권한명, 표현식)/> // 접근 제한 태그
		<security:form-login/>  
	</security:http>
	
	use-expressions="true" // 표현식 사용 = true
	use-expressions="false" // 표현식 사용 = false
	
	(2) 표현식
	hasRole(), hasAuthority() - 해당 권한이 있으면 true
	hasAnyRole(), hasAnyAutority() - 여러 권한 중에 하나라도 해당 권한이 있으면 true
	principal - 현재 사용자 정보를 의미
	permitAll - 모든 사용자에게 허용
	denyAll	  - 모든 사용자 거부
	
	isAnomymous() 		   - 익명의 사용자의 경우(로그인을 하지 않은 경우도 해당)
	isAuthenticated 	   - 인증된 사용자면 true
	isFullyAuthenticated() - (자동로그인)Remember-me로 인증된 것이 아닌 인증된 사용의 경우 true
	
	<security:intercept-url pattern="/customer/noticeReg.htm" access="isAuthenticated()"/>
	<security:intercept-url pattern="/customer/noticeDel.htm" access="hasRole('ROLE_ADMIN')"/>
	<security:intercept-url pattern="/**" access="permitAll"/>
	
	(3) 실제 회원 테이블 연동해서 로그인 처리 X
		인 메모리 인증 방식으로 로그인 처리(계정 + 역할(권한) 설정)
		
		
9. localhost/login 요청 URL
	hong, 4321 입력 후 인증 버튼 클릭
	스프링 5 부터 시큐리티와 관련된 인증 처리할 때
	PasswordEncoder 객체를 등록 해서 인증 처리 해야 된다.
	
10. hong/4321 로그인 하고 나서
	게시글 삭제 버튼을 클릭하면 
	HTTP 상태 403 - 금지됨 에러 발생.
	
	=> 접근 금지에러 발생했을 때 
		1) 특정 URL로 이동,
		2) AccessDeniedHandler 직접 구현해서 접근 제한 처리.. (권장)
			이유 ? 접근 제한이된 경우 다양한 처리를 하고 싶다면..
			AccessDeniedHandler 인터페이스를 구현
		<security:access-denied-handler error-page="/common/accessError.htm"/>	
		
		/common/accessError.htm 요청을 처리하는 컨트롤러 메서드 생성.
		=> CommonController 추가
			ㄴ /common/accessError.htm 요청을 처리하는 컨트롤러 메서드 구현
			
		org.doit.ik.security 패키지
			ㄴ CustomAccessDeniedHandler 클래스 추가
			
11. 스프링 제공하는 로그인 페이지 사용
	커스텀 로그인 페이지 사용
	login-page="/joinus/login.htm" 반드시 GET 요청이어야 한다.
	
12. 로그인 성공한 이후에 특정한 동작(작업)을 하도록 제어하고 싶은 경우
	(예 : 로그인 성공 후 특정 페이지로 이동, 별도의 쿠기 등을 생성해서 처리)
	AuthenticationSuccessHandler 인터페이스 구현.. 등록
		
13. 로그인 실패했을 때
	http://localhost/joinus/login.htm?error=true
	login.jsp
	
14. header.jsp 수정

			<security:authorize access="isAnonymous()">
				<a href="${pageContext.request.contextPath }/joinus/login.htm">로그인</a>
			</security:authorize>
			<security:authorize access="isAuthenticated()">
				<form action="${  pageContext.request.contextPath   }/joinus/logout.htm" method="post">                     
                       [<sec:authentication property="principal.username"/>] 님
                       <input type="hidden" name="${_csrf.parameterName }" value="${_csrf.token }">
                       <button>로그아웃</button>
                </form> 
			</security:authorize>

15. 로그 아웃 처리
	<security:logout logout-url="/joinus/logout.htm" 
		invalidate-session="true"
		logout-success-url="/"/>
		
		
		
		
		
		
		
		
		
		
		
		
		